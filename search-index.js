var searchIndex = JSON.parse('{\
"lenna_core":{"doc":"lenna-core","t":"HCCCCCCCCHAOOAADLLALMLMLMMAAAALLLDDLLLLLLLLLLLMLLLLLLLLLLMLLMLLLLLLLLLLLDLLLLLLLLLLLDLLLLLLLLLLLLLLLLIIIKLKKLLKKLLLKLDLLLLLLLLLLLLLLLLLLLLLLAAFFFFDILKLLALLMLLMMLLLLDLLMLLFFFLLL","n":["CORE_VERSION","Config","ExifProcessor","ImageProcessor","LennaImage","Pipeline","Pool","Processor","ProcessorConfig","RUSTC_VERSION","core","export_c_plugin","export_plugin","io","plugins","LennaImage","borrow","borrow_mut","config","default","exif","from","image","into","name","path","pipeline","pool","processor","resize","try_from","try_into","type_id","Config","ProcessorConfig","__clone_box","__clone_box","add","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","config","default","deserialize","deserialize","eq","eq","find","fmt","fmt","from","from","id","into","into","pipeline","remove","serialize","serialize","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Pipeline","borrow","borrow_mut","default","from","into","new","process","run","try_from","try_into","type_id","Pool","__clone_box","add","add_plugin","borrow","borrow_mut","clone","clone_into","default","from","get","ids","into","to_owned","try_from","try_into","type_id","ExifProcessor","ImageProcessor","Processor","author","config_ui","default_config","description","icon","id","name","process","process_exif","process_image","set_config","title","version","Resize","__clone_box","author","borrow","borrow_mut","clone","clone_into","config_ui","default","default_config","description","from","icon","into","name","process","process_exif","process_image","title","to_owned","try_from","try_into","type_id","read","write","read_from_data","read_from_file","write_to_data","write_to_file","PluginDeclaration","PluginRegistrar","__clone_box","add_plugin","borrow","borrow_mut","c","clone","clone_into","core_version","from","into","register","rustc_version","to_owned","try_from","try_into","type_id","LennaImageBuffer","borrow","borrow_mut","data","from","into","lenna_plugin_image","lenna_plugin_image_destroy","lenna_plugin_image_length","try_from","try_into","type_id"],"q":[[0,"lenna_core"],[15,"lenna_core::core"],[33,"lenna_core::core::config"],[72,"lenna_core::core::pipeline"],[84,"lenna_core::core::pool"],[101,"lenna_core::core::processor"],[117,"lenna_core::core::resize"],[140,"lenna_core::io"],[142,"lenna_core::io::read"],[144,"lenna_core::io::write"],[146,"lenna_core::plugins"],[164,"lenna_core::plugins::c"]],"d":["Version of lib which was used during compile.","","","","","","","","","Version of rust compiler which was used during compile.","core functionalities","The macro used to generate ffi c api.","The macro used to generate a plugin.","Input and output of images.","plugin related functionalities","image struct","","","Config functionalities","","image meta data","Returns the argument unchanged.","image data container","Calls <code>U::from(self)</code>.","name of image, also used as filename","path, also folder for image when saved","Processors pipeline","processors pool","image processor traits","image resize processor","","","","Configuration of a pipeline","Processor configuration","","","","","","","","","","","","configuration for processor","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","id of processor","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","pipeline of processor configs","","","","","","","","","","","","Pipeline to serially run processors","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","pool of processors","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","trait for exif metadata processing functionality","trait for image processing functionality","trait for processors","","","","","","","","","","","","","","Image resize processor","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","input functions","output functions","","read image from file","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,0,5,8,5,5,8,5,8,5,8,5,8,8,5,5,8,5,8,5,5,8,5,8,8,5,8,5,5,5,8,5,8,5,8,5,8,5,8,0,15,15,15,15,15,15,15,15,15,15,15,0,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,0,0,0,18,18,18,18,18,18,18,18,32,33,18,18,18,0,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,0,0,0,0,0,0,0,0,27,34,27,27,0,27,27,27,27,27,27,27,27,27,27,27,0,28,28,28,28,28,0,0,0,28,28,28],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],0,[[],1],0,[[]],0,[[]],0,0,0,0,0,0,[[],2],[[],2],[[],3],0,0,[4],[4],[[5,6,7]],[[]],[[]],[[]],[[]],[5,5],[8,8],[[]],[[]],0,[[],5],[9,[[2,[5]]]],[9,[[2,[8]]]],[[5,5],10],[[8,8],10],[[5,6],[[11,[8]]]],[[5,12],13],[[8,12],13],[[]],[[]],0,[[]],[[]],0,[[5,6],[[11,[8]]]],[[5,14],2],[[8,14],2],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],3],[[],3],0,[[]],[[]],[[],15],[[]],[[]],[[5,16],15],[[15,8,[17,[1]],[11,[[17,[18]]]]],[[2,[[17,[19]]]]]],[[15,[17,[1]]],[[2,[[17,[19]]]]]],[[],2],[[],2],[[],3],0,[4],[[16,[17,[18]]]],[[16,[17,[18]]]],[[]],[[]],[16,16],[[]],[[],16],[[]],[[16,20],[[11,[[17,[18]]]]]],[16,[[21,[6]]]],[[]],[[]],[[],2],[[],2],[[],3],0,0,0,[[],6],[[],[[11,[6]]]],[[],7],[[],6],[[],[[11,[[21,[22]]]]]],[[],6],[[],6],[[8,[17,[1]]],[[2,[[17,[19]]]]]],[[[17,[[21,[23]]]]],[[2,[[17,[19]]]]]],[[[17,[24]]],[[2,[[17,[19]]]]]],[7],[[],6],[[],6],0,[4],[25,6],[[]],[[]],[25,25],[[]],[25,[[11,[6]]]],[[],25],[25,7],[25,6],[[]],[25,[[11,[[21,[22]]]]]],[[]],[25,6],[[25,8,[17,[1]]],[[2,[[17,[19]]]]]],[[25,[17,[[21,[23]]]]],[[2,[[17,[19]]]]]],[[25,[17,[24]]],[[2,[[17,[19]]]]]],[25,6],[[]],[[],2],[[],2],[[],3],0,0,[[[21,[22]]],[[2,[1,[17,[19]]]]]],[6,[[2,[1,[17,[19]]]]]],[[1,26],[[2,[[21,[22]],[17,[19]]]]]],[[1,26],[[2,[[17,[19]]]]]],0,0,[4],[[[17,[18]]]],[[]],[[]],0,[27,27],[[]],0,[[]],[[]],0,0,[[]],[[],2],[[],2],[[],3],0,[[]],[[]],0,[[]],[[]],[[28,29,30],31],[28],[28,30],[[],2],[[],2],[[],3]],"c":[],"p":[[3,"LennaImage"],[4,"Result"],[3,"TypeId"],[3,"Private"],[3,"Config"],[3,"String"],[4,"Value"],[3,"ProcessorConfig"],[8,"Deserializer"],[15,"bool"],[4,"Option"],[3,"Formatter"],[6,"Result"],[8,"Serializer"],[3,"Pipeline"],[3,"Pool"],[3,"Box"],[8,"Processor"],[8,"Error"],[15,"str"],[3,"Vec"],[15,"u8"],[3,"Field"],[4,"DynamicImage"],[3,"Resize"],[4,"ImageOutputFormat"],[3,"PluginDeclaration"],[3,"LennaImageBuffer"],[6,"c_char"],[6,"size_t"],[6,"c_int"],[8,"ExifProcessor"],[8,"ImageProcessor"],[8,"PluginRegistrar"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
