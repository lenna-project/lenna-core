var searchIndex = JSON.parse('{\
"lenna_core":{"doc":"lenna-core","t":[7,2,2,2,2,2,2,2,2,7,0,14,14,0,0,3,11,11,0,11,12,11,12,11,12,12,0,0,0,0,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,8,8,10,11,10,10,11,11,10,10,11,11,11,10,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,5,5,5,5,3,8,11,10,11,11,0,11,11,12,11,11,12,12,11,11,11,11,3,11,11,12,11,11,5,5,5,11,11,11],"n":["CORE_VERSION","Config","ExifProcessor","ImageProcessor","LennaImage","Pipeline","Pool","Processor","ProcessorConfig","RUSTC_VERSION","core","export_c_plugin","export_plugin","io","plugins","LennaImage","borrow","borrow_mut","config","default","exif","from","image","into","name","path","pipeline","pool","processor","resize","try_from","try_into","type_id","Config","ProcessorConfig","__clone_box","__clone_box","add","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","config","default","deserialize","deserialize","eq","eq","find","fmt","fmt","from","from","id","into","into","ne","ne","pipeline","remove","serialize","serialize","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Pipeline","borrow","borrow_mut","default","from","into","new","process","run","try_from","try_into","type_id","Pool","__clone_box","add","add_plugin","borrow","borrow_mut","clone","clone_into","default","from","get","ids","into","to_owned","try_from","try_into","type_id","ExifProcessor","ImageProcessor","Processor","author","config_ui","default_config","description","icon","id","name","process","process_exif","process_image","set_config","title","version","Resize","__clone_box","author","borrow","borrow_mut","clone","clone_into","config_ui","default","default_config","description","from","icon","into","name","process","process_exif","process_image","title","to_owned","try_from","try_into","type_id","read","write","read_from_data","read_from_file","write_to_data","write_to_file","PluginDeclaration","PluginRegistrar","__clone_box","add_plugin","borrow","borrow_mut","c","clone","clone_into","core_version","from","into","register","rustc_version","to_owned","try_from","try_into","type_id","LennaImageBuffer","borrow","borrow_mut","data","from","into","lenna_plugin_image","lenna_plugin_image_destroy","lenna_plugin_image_length","try_from","try_into","type_id"],"q":["lenna_core","","","","","","","","","","","","","","","lenna_core::core","","","","","","","","","","","","","","","","","","lenna_core::core::config","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","lenna_core::core::pipeline","","","","","","","","","","","","lenna_core::core::pool","","","","","","","","","","","","","","","","","lenna_core::core::processor","","","","","","","","","","","","","","","","lenna_core::core::resize","","","","","","","","","","","","","","","","","","","","","","","lenna_core::io","","lenna_core::io::read","","lenna_core::io::write","","lenna_core::plugins","","","","","","","","","","","","","","","","","","lenna_core::plugins::c","","","","","","","","","","",""],"d":["Version of lib which was used during compile.","","","","","","","","","Version of rust compiler which was used during compile.","core functionalities","The macro used to generate ffi c api.","The macro used to generate a plugin.","Input and output of images.","plugin related functionalities","image struct","","","Config functionalities","","image meta data","Returns the argument unchanged.","image data container","Calls <code>U::from(self)</code>.","name of image, also used as filename","path, also folder for image when saved","Processors pipeline","processors pool","image processor traits","image resize processor","","","","Configuration of a pipeline","Processor configuration","","","","","","","","","","","","configuration for processor","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","id of processor","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","pipeline of processor configs","","","","","","","","","","","","Pipeline to serially run processors","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","pool of processors","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","trait for exif metadata processing functionality","trait for image processing functionality","trait for processors","","","","","","","","","","","","","","Image resize processor","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","input functions","output functions","","read image from file","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,0,2,3,2,2,3,2,3,2,3,2,3,3,2,2,3,2,3,2,2,3,2,3,3,2,3,2,3,2,2,2,3,2,3,2,3,2,3,2,3,0,4,4,4,4,4,4,4,4,4,4,4,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,6,6,6,6,6,6,6,6,7,8,6,6,6,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,0,0,0,0,0,0,0,10,11,10,10,0,10,10,10,10,10,10,10,10,10,10,10,0,12,12,12,12,12,0,0,0,12,12,12],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],null,[[]],null,[[]],null,[[]],null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,[[["",0],["private",3]]],[[["",0],["private",3]]],[[["",0],["string",3],["value",4]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["config",3]],[[["",0]],["processorconfig",3]],[[["",0],["",0]]],[[["",0],["",0]]],null,[[]],[[],["result",4]],[[],["result",4]],[[["",0],["config",3]],["bool",0]],[[["",0],["processorconfig",3]],["bool",0]],[[["",0],["string",3]],["option",4,[["processorconfig",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],null,[[]],[[]],[[["",0],["config",3]],["bool",0]],[[["",0],["processorconfig",3]],["bool",0]],null,[[["",0],["string",3]],["option",4,[["processorconfig",3]]]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[]],[[["config",3],["pool",3]],["pipeline",3]],[[["",0],["processorconfig",3],["box",3],["option",4,[["box",3,[["processor",8]]]]]],["result",4,[["box",3,[["error",8]]]]]],[[["",0],["box",3]],["result",4,[["box",3,[["error",8]]]]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[["",0],["private",3]]],[[["",0],["box",3,[["processor",8]]]]],[[["",0],["box",3,[["processor",8]]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["pool",3]],[[["",0],["",0]]],[[]],[[]],[[["",0],["str",0]],["option",4,[["box",3,[["processor",8]]]]]],[[["",0]],["vec",3,[["string",3]]]],[[]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,[[["",0]],["string",3]],[[["",0]],["option",4,[["string",3]]]],[[["",0]],["value",4]],[[["",0]],["string",3]],[[["",0]],["option",4,[["vec",3,[["u8",0]]]]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0],["processorconfig",3],["box",3]],["result",4,[["box",3,[["error",8]]]]]],[[["",0],["box",3]],["result",4,[["box",3,[["error",8]]]]]],[[["",0],["box",3]],["result",4,[["box",3,[["error",8]]]]]],[[["",0],["value",4]]],[[["",0]],["string",3]],[[["",0]],["string",3]],null,[[["",0],["private",3]]],[[["",0]],["string",3]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["resize",3]],[[["",0],["",0]]],[[["",0]],["option",4,[["string",3]]]],[[],["resize",3]],[[["",0]],["value",4]],[[["",0]],["string",3]],[[]],[[["",0]],["option",4,[["vec",3,[["u8",0]]]]]],[[]],[[["",0]],["string",3]],[[["",0],["processorconfig",3],["box",3]],["result",4,[["box",3,[["error",8]]]]]],[[["",0],["box",3]],["result",4,[["box",3,[["error",8]]]]]],[[["",0],["box",3]],["result",4,[["box",3,[["error",8]]]]]],[[["",0]],["string",3]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,[[["vec",3,[["u8",0]]]],["result",4,[["lennaimage",3],["box",3,[["error",8]]]]]],[[["string",3]],["result",4,[["lennaimage",3],["box",3,[["error",8]]]]]],[[["lennaimage",3],["imageoutputformat",4]],["result",4,[["vec",3,[["u8",0]]],["box",3,[["error",8]]]]]],[[["lennaimage",3],["imageoutputformat",4]],["result",4,[["box",3,[["error",8]]]]]],null,null,[[["",0],["private",3]]],[[["",0],["box",3,[["processor",8]]]]],[[["",0]],["",0]],[[["",0]],["",0]],null,[[["",0]],["plugindeclaration",3]],[[["",0],["",0]]],null,[[]],[[]],null,null,[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[["",0]],["",0]],[[["",0]],["",0]],null,[[]],[[]],[[["size_t",6]],["c_int",6]],[[]],[[],["size_t",6]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]]],"p":[[3,"LennaImage"],[3,"Config"],[3,"ProcessorConfig"],[3,"Pipeline"],[3,"Pool"],[8,"Processor"],[8,"ExifProcessor"],[8,"ImageProcessor"],[3,"Resize"],[3,"PluginDeclaration"],[8,"PluginRegistrar"],[3,"LennaImageBuffer"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};